@export buildin.2d.path.fill.vertex

attribute vec3 position;
attribute vec4 color;
attribute vec3 t0;
attribute vec3 t1;
attribute vec3 coord;

uniform mat4 worldViewProjection : WORLDVIEWPROJECTION;

varying vec4 v_Color;
varying vec3 v_klm;

void main()
{
    mat3 localTransform = mat3(
        t0.x, t1.x, 0.0,
        t0.y, t1.y, 0.0,
        t0.z, t1.z, 1.0
    );
    vec3 pos2d = vec3(position.xy, 1.0);
    pos2d = localTransform * pos2d;
    vec4 pos3d = vec4(pos2d.xy, position.z, 1.0);

    v_Color = color;
    v_klm = coord;
    gl_Position = worldViewProjection * pos3d;
}

@end


@export buildin.2d.path.fill.fragment

varying vec4 v_Color;
varying vec3 v_klm;

#ifdef ANTIALIASING
    #extension GL_OES_standard_derivatives : enable
#endif

void main()
{
    #ifdef ANTIALIASING
        // Gradients
        vec3 px = dFdx(v_klm);
        vec3 py = dFdy(v_klm);
        // Chain rule
        float k2 = v_klm.x * v_klm.x;
        float c = k2 * v_klm.x - v_klm.y * v_klm.z;
        float k23 = 3.0 * k2;
        float cx = k23 * px.x - v_klm.z * px.y - v_klm.y * px.z;
        float cy = k23 * py.x - v_klm.z * py.y - v_klm.y * py.z;
        // Signed distance
        float sd = c / sqrt(cx * cx + cy * cy);

        float alpha = clamp(0.5 - sd, 0.0, 1.0);

    #else
        float alpha = step(v_klm.x * v_klm.x * v_klm.x, v_klm.y * v_klm.z);
    #endif

    gl_FragColor = v_Color;
    gl_FragColor.a *= alpha;

    if (gl_FragColor.a < 1e-3) {
        discard;
    }
}

@end

@export buildin.2d.path.stroke.vertex

attribute vec3 position;
attribute vec4 color;
attribute vec3 t0;
attribute vec3 t1;

uniform mat4 worldViewProjection : WORLDVIEWPROJECTION;

varying vec4 v_Color;

void main()
{
    mat3 localTransform = mat3(
        t0.x, t1.x, 0.0,
        t0.y, t1.y, 0.0,
        t0.z, t1.z, 1.0
    );
    vec3 pos2d = vec3(position.xy, 1.0);
    pos2d = localTransform * pos2d;
    vec4 pos3d = vec4(pos2d.xy, position.z, 1.0);

    v_Color = color;
    gl_Position = worldViewProjection * pos3d;
}

@end


@export buildin.2d.path.stroke.fragment

varying vec4 v_Color;

void main()
{
    gl_FragColor = v_Color;
}

@end